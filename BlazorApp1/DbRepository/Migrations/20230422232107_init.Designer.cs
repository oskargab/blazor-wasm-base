// <auto-generated />
using System;
using DbRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbRepository.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230422232107_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DbRepository.DiscordAccount", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<bool>("AllowLogin")
                        .HasColumnType("boolean");

                    b.Property<int?>("Discriminator")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("ExternalId");

                    b.ToTable("DiscordAccounts");
                });

            modelBuilder.Entity("DbRepository.GoogleAccount", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<bool>("AllowLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("ExternalId");

                    b.ToTable("GoogleAccounts");
                });

            modelBuilder.Entity("DbRepository.InternalAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InternalAccounts");
                });

            modelBuilder.Entity("DbRepository.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DiscordAccountId")
                        .HasColumnType("text");

                    b.Property<string>("GoogleAccountId")
                        .HasColumnType("text");

                    b.Property<string>("InternalAccountId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscordAccountId")
                        .IsUnique();

                    b.HasIndex("GoogleAccountId")
                        .IsUnique();

                    b.HasIndex("InternalAccountId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DbRepository.User", b =>
                {
                    b.HasOne("DbRepository.DiscordAccount", "DiscordAccount")
                        .WithOne()
                        .HasForeignKey("DbRepository.User", "DiscordAccountId");

                    b.HasOne("DbRepository.GoogleAccount", "GoogleAccount")
                        .WithOne()
                        .HasForeignKey("DbRepository.User", "GoogleAccountId");

                    b.HasOne("DbRepository.InternalAccount", "InternalAccount")
                        .WithOne()
                        .HasForeignKey("DbRepository.User", "InternalAccountId");

                    b.Navigation("DiscordAccount");

                    b.Navigation("GoogleAccount");

                    b.Navigation("InternalAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
